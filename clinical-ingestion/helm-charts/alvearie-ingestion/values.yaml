# ------------------------------------------------------------------------------
# General Configuration
# ------------------------------------------------------------------------------
# Default values for alvearie-ingestion.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

nodeSelector: {}

tolerations: []

affinity: {}

# ------------------------------------------------------------------------------
# FHIR Configuration
# Values: https://github.com/Alvearie/health-patterns/clinical-ingestion/helm-charts/fhir/values.yaml
# ------------------------------------------------------------------------------
fhir:
  enabled: true

# ------------------------------------------------------------------------------
# Nifi Registry
# Values: https://github.com/cetic/helm-nifi/blob/master/values.yaml
# ------------------------------------------------------------------------------
nifi-registry:
  # The fullname is overridden to some static name in order to automatically register the NiFi Registry with the NiFi deployment
  fullnameOverride: ingestion-nifi-registry

# ------------------------------------------------------------------------------
# Zookeeper Configuration
# Values: https://github.com/bitnami/charts/blob/master/bitnami/zookeeper/values.yaml
# ------------------------------------------------------------------------------
zookeeper:
  enabled: true
  # The zookeeper fullname is overridden so that the same instance deployed here by default can be referred to by both NiFi and Kafka
  fullnameOverride: ingestion-zookeeper
  persistence:
    enabled: false

# ------------------------------------------------------------------------------
# Nifi Configuration
# Values: https://github.com/cetic/helm-nifi/blob/master/values.yaml
# ------------------------------------------------------------------------------
nifi:
  fullnameOverride: ingestion-nifi
  enabled: true
  service:
    type: LoadBalancer

    processors:
      enabled: true
      ports:
        - name: nifi-metrics
          port: 12667
          targetPort: 12667

  url: ""
  port: 80
  zookeeper:
    ## Values: https://github.com/bitnami/charts/blob/master/bitnami/zookeeper/values.yaml
    enabled: false
    url: ingestion-zookeeper
  registry:
    ## We use a different NiFi Registry than the default one, that loads the flow from the Alvearie Github NiFi flow repository
    enabled: false
    url: ingestion-nifi-registry


# ------------------------------------------------------------------------------
# Kafka Configuration
# Values: https://github.com/bitnami/charts/blob/master/bitnami/kafka/values.yaml
# ------------------------------------------------------------------------------
kafka:
  externalAccess:
    enabled: true
    service:
      type: LoadBalancer
      port: 9094
    autoDiscovery:
      enabled: true
  serviceAccount:
    create: true
  rbac:
    create: true
  persistence:
    # Persistence disabled in order to avoid having to delete the kafka PersistenceVolume created by the StatefulSet when re-deploying the chart to facilitate rapid deployment
    enabled: false
  replicas: 1
  zookeeper:
    enabled: false
  externalZookeeper:
    # The zookeeper server is overridden so that the same instance deployed here by default can be referred to by both NiFi and Kafka
    servers:
      - ingestion-zookeeper

  metrics:
    ## Prometheus Kafka Exporter: exposes complimentary metrics to JMX Exporter
    ##
    kafka:
      enabled: true
    ## Prometheus JMX Exporter: exposes the majority of Kafkas metrics
    ##
    jmx:
      enabled: true

    serviceMonitor:
      enabled: true

# ------------------------------------------------------------------------------
# Prometheus-Grafana stack Configuration
# This will add specific configuration for the new grafana-prometheusSpec
# monitoring stack so that nifi and kafka will both generate metrics to a
# externally available grafana
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Nifi Metrics Configuration
# This adds an additional scrape configuration that will expose Nifi /metrics
# on the port defined
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Kafka Metrics Configuration
# This adds an additional scrape configuration that will expose Kafka /metrics
# on the port defined.  Note there are two kafka type metrics
# ------------------------------------------------------------------------------
kube-prometheus-stack:
  grafana:
    adminPassword: admin
    service:
      type: LoadBalancer

  prometheus:
    prometheusSpec:
      additionalScrapeConfigs:
        - job_name: 'nifi'
          static_configs:
            - targets: ['ingestion-nifi:12667']

        - job_name: 'kafka-metrics'
          static_configs:
            - targets: ['stack-kafka-metrics:9308']

        - job_name: 'kafka-jmx-metrics'
          static_configs:
            - targets: ['stack-kafka-jmx-metrics:5556']
